import Nat "mo:base/Nat";
import Iter "mo:base/Iter";
import Address "../src/Address";
import Debug "mo:base/Debug";

let testData: [{
  key : [Nat8];
  expectedP2pkh : Text;
}] =
[
  {
    key = [
      0x03, 0x87, 0xd8, 0x20, 0x42, 0xd9, 0x34, 0x47, 0x00, 0x8d, 0xfe, 0x2a,
      0xf7, 0x62, 0x06, 0x8a, 0x1e, 0x53, 0xff, 0x39, 0x4a, 0x5b, 0xf8, 0xf6,
      0x8a, 0x04, 0x5f, 0xa6, 0x42, 0xb9, 0x9e, 0xa5, 0xd1
    ];
    expectedP2pkh = "1MmqjDhakEfJd9r5BoDhPApCpA75Em17GA";
  },
  {
    key = [];
    expectedP2pkh = "1HT7xU2Ngenf7D4yocz2SAcnNLW7rK8d4E";
  },
  {
    key = [
      0x61
    ];
    expectedP2pkh = "1EyP3gwzp1Nwu24kiJTy4jT4Jkbca8kSCQ";
  },
  {
    key = [
      0x62, 0x62, 0x62
    ];
    expectedP2pkh = "1JCwcqgfNS2QEbzG4ppofz1QKVAt3uYky2";
  },
  {
    key = [
      0x63, 0x63, 0x63
   ];
    expectedP2pkh = "1J67gYf7x9ewevkiTiRG6adpftw9WdooCw";
  },
  {
    key = [
      0x73, 0x69, 0x6d, 0x70, 0x6c, 0x79, 0x20, 0x61, 0x20, 0x6c, 0x6f, 0x6e,
      0x67, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67
    ];
    expectedP2pkh = "15TBHoEgej8yQmFNqQoo8qspM8ccZULmjf";
  },
  {
    key = [
      0x0, 0xeb, 0x15, 0x23, 0x1d, 0xfc, 0xeb, 0x60, 0x92, 0x58, 0x86, 0xb6,
      0x7d, 0x6, 0x52, 0x99, 0x92, 0x59, 0x15, 0xae, 0xb1, 0x72, 0xc0, 0x66,
      0x47
    ];
    expectedP2pkh = "1DXhaYq5fGqnuqoWFbvZWVaXGYAS3qnugN";
  },
  {
    key = [
      0x51, 0x6b, 0x6f, 0xcd, 0xf
    ];
    expectedP2pkh = "12cMf6D8dS2iMmZRRS9nSUBvFW4R6kH9wm";
  },
  {
    key = [
      0xbf, 0x4f, 0x89, 0x0, 0x1e, 0x67, 0x2, 0x74, 0xdd
    ];
    expectedP2pkh = "1CKrCT514kpeuDgEYsbwpxxf2GQPtB8qLw";
  },
  {
    key = [
      0xec, 0xac, 0x89, 0xca, 0xd9, 0x39, 0x23, 0xc0, 0x23, 0x21
    ];
    expectedP2pkh = "1NZRiwhWNrRiYgSEUAJxuqyas7RXELxc4F";
  },
  {
    key = [
      0x10, 0xc8, 0x51, 0x1e
    ];
    expectedP2pkh = "1FTGbTjJftkEaEErUujaQRY2JgGRX7d6tE";
  },
  {
    key = [
      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    ];
    expectedP2pkh = "1DKeDXEG4T2YbA95Tx143nM2bbCDPMuLWb";
  },
  {
    key = [
      0x0, 0x1, 0x11, 0xd3, 0x8e, 0x5f, 0xc9, 0x7, 0x1f, 0xfc,
      0xd2, 0xb, 0x4a, 0x76, 0x3c, 0xc9, 0xae, 0x4f, 0x25, 0x2b,
      0xb4, 0xe4, 0x8f, 0xd6, 0x6a, 0x83, 0x5e, 0x25, 0x2a, 0xda,
      0x93, 0xff, 0x48, 0xd, 0x6d, 0xd4, 0x3d, 0xc6, 0x2a, 0x64,
      0x11, 0x55, 0xa5
    ];
    expectedP2pkh = "1425sjmDJ27QMT8jvToTkZ3Bxjxwz6rewy";
  },
  {
    key = [
      0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa,
      0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14,
      0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e,
      0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,
      0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32,
      0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c,
      0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46,
      0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50,
      0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a,
      0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64,
      0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e,
      0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,
      0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82,
      0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c,
      0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96,
      0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0,
      0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa,
      0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4,
      0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe,
      0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8,
      0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2,
      0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc,
      0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6,
      0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0,
      0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa,
      0xfb, 0xfc, 0xfd, 0xfe, 0xff
    ];
    expectedP2pkh = "1hRedZNSTKCMJAfPTkQ5BWv9F8uroVSdh";
  },
];

do {
  Debug.print("Address Derivation");
  for (i in Iter.range(0, testData.size() - 1)) {
    Debug.print("  Test " # Nat.toText(i));
    do {
      Debug.print("    P2PKH");
      let expected : Text = testData[i].expectedP2pkh;
      let actual : Text = Address.keyToP2pkh(testData[i].key);

      assert(expected == actual);
    }
  };
};

