import Iter "mo:base/Iter";
import Debug "mo:base/Debug";
import Hmac "../src/Hmac";

let testData: [{
  desc : Text;
  key : [Nat8];
  message : [Nat8];
  expectedSHA256 : [Nat8];
  expectedSHA512 : [Nat8];
}] =
[
  {
    desc = "Empty input";
    key = [
      0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb,
      0xb, 0xb, 0xb, 0xb, 0xb, 0xb
    ];
    message = [];
    expectedSHA256 = [
      0x99, 0x9a, 0x90, 0x12, 0x19, 0xf0, 0x32, 0xcd, 0x49, 0x7c, 0xad, 0xb5,
      0xe6, 0x5, 0x1e, 0x97, 0xb6, 0xa2, 0x9a, 0xb2, 0x97, 0xbd, 0x6a, 0xe7,
      0x22, 0xbd, 0x60, 0x62, 0xa2, 0xf5, 0x95, 0x42
    ];
    expectedSHA512 = [
      0xad, 0x8d, 0xa3, 0xd8, 0x82, 0xaf, 0x6e, 0x9b, 0x87, 0x24, 0x57, 0xad,
      0xcd, 0xd6, 0x38, 0xe9, 0xb8, 0x7a, 0xf4, 0x48, 0x25, 0x42, 0x50, 0x85,
      0xf8, 0xce, 0x81, 0xa4, 0x12, 0x2b, 0xab, 0x78, 0x1b, 0x92, 0xf5, 0xab,
      0x92, 0xac, 0x24, 0x94, 0x8a, 0xd3, 0x69, 0xf8, 0x65, 0x58, 0xfd, 0x46,
      0x9c, 0xa3, 0xf4, 0x86, 0x1c, 0xb0, 0xf0, 0xdf, 0xb3, 0x31, 0x54, 0x42,
      0x8e, 0xd0, 0x3d, 0xfb
    ];
  },
  {
    desc = "Empty key";
    key = [];
    message = [ 0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65 ];
    expectedSHA256 = [
      0xe4, 0x84, 0x11, 0x26, 0x27, 0x15, 0xc8, 0x37, 0xc, 0xd5, 0xe7, 0xbf,
      0x8e, 0x82, 0xbe, 0xf5, 0x3b, 0xd5, 0x37, 0x12, 0xd0, 0x7, 0xf3, 0x42,
      0x93, 0x51, 0x84, 0x3b, 0x77, 0xc7, 0xbb, 0x9b
    ];
    expectedSHA512 = [
      0xf7, 0x68, 0x8a, 0x10, 0x43, 0x26, 0xd3, 0x6c, 0x19, 0x40, 0xf6, 0xd2,
      0x8d, 0x74, 0x6c, 0x6, 0x61, 0xd3, 0x83, 0xe0, 0xd1, 0x4f, 0xe8, 0xa0,
      0x46, 0x49, 0x44, 0x47, 0x77, 0x61, 0xf, 0x5d, 0xd9, 0x56, 0x5a, 0x36,
      0x84, 0x6a, 0xb9, 0xe9, 0xe7, 0x34, 0xcf, 0x38, 0xd, 0x3a, 0x7, 0xd,
      0x8e, 0xf0, 0x21, 0xb5, 0xf3, 0xa5, 0xc, 0x48, 0x17, 0x10, 0xa4, 0x64,
      0x96, 0x8e, 0x34, 0x19
    ];
  },
  {
    desc = "Empty key and empty input";
    key = [];
    message = [];
    expectedSHA256 = [
      0xb6, 0x13, 0x67, 0x9a, 0x8, 0x14, 0xd9, 0xec, 0x77, 0x2f, 0x95, 0xd7,
      0x78, 0xc3, 0x5f, 0xc5, 0xff, 0x16, 0x97, 0xc4, 0x93, 0x71, 0x56, 0x53,
      0xc6, 0xc7, 0x12, 0x14, 0x42, 0x92, 0xc5, 0xad
    ];
    expectedSHA512 = [
      0xb9, 0x36, 0xce, 0xe8, 0x6c, 0x9f, 0x87, 0xaa, 0x5d, 0x3c, 0x6f, 0x2e,
      0x84, 0xcb, 0x5a, 0x42, 0x39, 0xa5, 0xfe, 0x50, 0x48, 0xa, 0x6e, 0xc6,
      0x6b, 0x70, 0xab, 0x5b, 0x1f, 0x4a, 0xc6, 0x73, 0xc, 0x6c, 0x51, 0x54,
      0x21, 0xb3, 0x27, 0xec, 0x1d, 0x69, 0x40, 0x2e, 0x53, 0xdf, 0xb4, 0x9a,
      0xd7, 0x38, 0x1e, 0xb0, 0x67, 0xb3, 0x38, 0xfd, 0x7b, 0xc, 0xb2, 0x22,
      0x47, 0x22, 0x5d, 0x47
    ];
  },
  {
    desc = "Basic Test";
    key = [
      0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb,
      0xb, 0xb, 0xb, 0xb, 0xb, 0xb
    ];
    message = [ 0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65 ];
    expectedSHA256 = [
      0xb0, 0x34, 0x4c, 0x61, 0xd8, 0xdb, 0x38, 0x53, 0x5c, 0xa8, 0xaf, 0xce,
      0xaf, 0xb, 0xf1, 0x2b, 0x88, 0x1d, 0xc2, 0x0, 0xc9, 0x83, 0x3d, 0xa7,
      0x26, 0xe9, 0x37, 0x6c, 0x2e, 0x32, 0xcf, 0xf7
    ];
    expectedSHA512 = [
      0x87, 0xaa, 0x7c, 0xde, 0xa5, 0xef, 0x61, 0x9d, 0x4f, 0xf0, 0xb4, 0x24,
      0x1a, 0x1d, 0x6c, 0xb0, 0x23, 0x79, 0xf4, 0xe2, 0xce, 0x4e, 0xc2, 0x78,
      0x7a, 0xd0, 0xb3, 0x5, 0x45, 0xe1, 0x7c, 0xde, 0xda, 0xa8, 0x33, 0xb7,
      0xd6, 0xb8, 0xa7, 0x2, 0x3, 0x8b, 0x27, 0x4e, 0xae, 0xa3, 0xf4, 0xe4,
      0xbe, 0x9d, 0x91, 0x4e, 0xeb, 0x61, 0xf1, 0x70, 0x2e, 0x69, 0x6c, 0x20,
      0x3a, 0x12, 0x68, 0x54
    ];
  },
  {
    desc = "Test with a key shorter than the length of the HMAC output";
    key = [0x4a, 0x65, 0x66, 0x65];
    message = [
      0x77, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20, 0x79, 0x61, 0x20, 0x77,
      0x61, 0x6e, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x68,
      0x69, 0x6e, 0x67, 0x3f
    ];
    expectedSHA256 = [
      0x5b, 0xdc, 0xc1, 0x46, 0xbf, 0x60, 0x75, 0x4e, 0x6a, 0x4, 0x24, 0x26,
      0x8, 0x95, 0x75, 0xc7, 0x5a, 0x0, 0x3f, 0x8, 0x9d, 0x27, 0x39, 0x83,
      0x9d, 0xec, 0x58, 0xb9, 0x64, 0xec, 0x38, 0x43
    ];
    expectedSHA512 = [
      0x16, 0x4b, 0x7a, 0x7b, 0xfc, 0xf8, 0x19, 0xe2, 0xe3, 0x95, 0xfb, 0xe7,
      0x3b, 0x56, 0xe0, 0xa3, 0x87, 0xbd, 0x64, 0x22, 0x2e, 0x83, 0x1f, 0xd6,
      0x10, 0x27, 0xc, 0xd7, 0xea, 0x25, 0x5, 0x54, 0x97, 0x58, 0xbf, 0x75,
      0xc0, 0x5a, 0x99, 0x4a, 0x6d, 0x3, 0x4f, 0x65, 0xf8, 0xf0, 0xe6, 0xfd,
      0xca, 0xea, 0xb1, 0xa3, 0x4d, 0x4a, 0x6b, 0x4b, 0x63, 0x6e, 0x7, 0xa,
      0x38, 0xbc, 0xe7, 0x37
    ];
  },
  {
    desc = "Test with a combined length of key and data that is larger than 64 bytes";
    key = [
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa
    ];
    message = [
        0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
        0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
        0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
        0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
        0xdd, 0xdd
    ];
    expectedSHA256 = [
        0x77, 0x3e, 0xa9, 0x1e, 0x36, 0x80, 0xe, 0x46, 0x85, 0x4d, 0xb8, 0xeb,
        0xd0, 0x91, 0x81, 0xa7, 0x29, 0x59, 0x9, 0x8b, 0x3e, 0xf8, 0xc1, 0x22,
        0xd9, 0x63, 0x55, 0x14, 0xce, 0xd5, 0x65, 0xfe
    ];
    expectedSHA512 = [
      0xfa, 0x73, 0xb0, 0x8, 0x9d, 0x56, 0xa2, 0x84, 0xef, 0xb0, 0xf0, 0x75,
      0x6c, 0x89, 0xb, 0xe9, 0xb1, 0xb5, 0xdb, 0xdd, 0x8e, 0xe8, 0x1a, 0x36,
      0x55, 0xf8, 0x3e, 0x33, 0xb2, 0x27, 0x9d, 0x39, 0xbf, 0x3e, 0x84, 0x82,
      0x79, 0xa7, 0x22, 0xc8, 0x6, 0xb4, 0x85, 0xa4, 0x7e, 0x67, 0xc8, 0x7,
      0xb9, 0x46, 0xa3, 0x37, 0xbe, 0xe8, 0x94, 0x26, 0x74, 0x27, 0x88, 0x59,
      0xe1, 0x32, 0x92, 0xfb
    ];
  },
  {
    desc = "Test with a combined length of key and data that is larger than 64 bytes";
    key = [
      0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe,
      0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19
    ];
    message = [
      0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
      0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
      0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
      0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
      0xcd, 0xcd
    ];
    expectedSHA256 = [
      0x82, 0x55, 0x8a, 0x38, 0x9a, 0x44, 0x3c, 0xe, 0xa4, 0xcc, 0x81, 0x98,
      0x99, 0xf2, 0x8, 0x3a, 0x85, 0xf0, 0xfa, 0xa3, 0xe5, 0x78, 0xf8, 0x7,
      0x7a, 0x2e, 0x3f, 0xf4, 0x67, 0x29, 0x66, 0x5b
    ];
    expectedSHA512 = [
      0xb0, 0xba, 0x46, 0x56, 0x37, 0x45, 0x8c, 0x69, 0x90, 0xe5, 0xa8, 0xc5,
      0xf6, 0x1d, 0x4a, 0xf7, 0xe5, 0x76, 0xd9, 0x7f, 0xf9, 0x4b, 0x87, 0x2d,
      0xe7, 0x6f, 0x80, 0x50, 0x36, 0x1e, 0xe3, 0xdb, 0xa9, 0x1c, 0xa5, 0xc1,
      0x1a, 0xa2, 0x5e, 0xb4, 0xd6, 0x79, 0x27, 0x5c, 0xc5, 0x78, 0x80, 0x63,
      0xa5, 0xf1, 0x97, 0x41, 0x12, 0xc, 0x4f, 0x2d, 0xe2, 0xad, 0xeb, 0xeb,
      0x10, 0xa2, 0x98, 0xdd
    ];
  },
  {
    desc = "Test with a key and data that is larger than 128 bytes";
    key = [
      0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
      0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
      0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
      0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
      0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
      0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
      0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
      0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
      0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
      0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
      0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa
    ];
    message = [
      0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x74, 0x65,
      0x73, 0x74, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x6c,
      0x61, 0x72, 0x67, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x62,
      0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x6b, 0x65,
      0x79, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x20, 0x6c, 0x61, 0x72, 0x67,
      0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x62, 0x6c, 0x6f, 0x63,
      0x6b, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e,
      0x20, 0x54, 0x68, 0x65, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x6e, 0x65, 0x65,
      0x64, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x68, 0x61, 0x73,
      0x68, 0x65, 0x64, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x62,
      0x65, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x62, 0x79,
      0x20, 0x74, 0x68, 0x65, 0x20, 0x48, 0x4d, 0x41, 0x43, 0x20, 0x61, 0x6c,
      0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x2e
    ];
    expectedSHA256 = [
      0x9b, 0x9, 0xff, 0xa7, 0x1b, 0x94, 0x2f, 0xcb, 0x27, 0x63, 0x5f, 0xbc,
      0xd5, 0xb0, 0xe9, 0x44, 0xbf, 0xdc, 0x63, 0x64, 0x4f, 0x7, 0x13, 0x93,
      0x8a, 0x7f, 0x51, 0x53, 0x5c, 0x3a, 0x35, 0xe2
    ];
    expectedSHA512 = [
      0xe3, 0x7b, 0x6a, 0x77, 0x5d, 0xc8, 0x7d, 0xba, 0xa4, 0xdf, 0xa9, 0xf9,
      0x6e, 0x5e, 0x3f, 0xfd, 0xde, 0xbd, 0x71, 0xf8, 0x86, 0x72, 0x89, 0x86,
      0x5d, 0xf5, 0xa3, 0x2d, 0x20, 0xcd, 0xc9, 0x44, 0xb6, 0x2, 0x2c, 0xac,
      0x3c, 0x49, 0x82, 0xb1, 0xd, 0x5e, 0xeb, 0x55, 0xc3, 0xe4, 0xde, 0x15,
      0x13, 0x46, 0x76, 0xfb, 0x6d, 0xe0, 0x44, 0x60, 0x65, 0xc9, 0x74, 0x40,
      0xfa, 0x8c, 0x6a, 0x58
    ];
  }
];


do {
  Debug.print("HMAC");
  for (i in Iter.range(0, testData.size() - 1)) {
    Debug.print("  " # testData[i].desc);

    do {
      Debug.print("    SHA256");
      let hmac : Hmac.Hmac = Hmac.sha256(testData[i].key);
      hmac.write(testData[i].message);

      let actual : [Nat8] = hmac.sum();
      assert(testData[i].expectedSHA256 == actual);
    };

    do {
      Debug.print("    SHA512");
      let hmac : Hmac.Hmac = Hmac.sha512(testData[i].key);
      hmac.write(testData[i].message);

      let actual : [Nat8] = hmac.sum();
      assert(testData[i].expectedSHA512 == actual);
    }
  };
};
